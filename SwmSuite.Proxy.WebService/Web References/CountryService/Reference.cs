//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SwmSuite.Proxy.WebService.CountryService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CountryServiceSoap", Namespace="SimpleWorkfloorManagementSuiteNameSpace")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BusinessObjectBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Country[]))]
    public partial class CountryService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private SwmSuiteSoapHeader swmSuiteSoapHeaderValueField;
        
        private System.Threading.SendOrPostCallback GetCountriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCountriesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CountryService() {
            this.Url = global::SwmSuite.Proxy.WebService.Properties.Settings.Default.SwmSuite_Proxy_WebService_CountryService_CountryService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public SwmSuiteSoapHeader SwmSuiteSoapHeaderValue {
            get {
                return this.swmSuiteSoapHeaderValueField;
            }
            set {
                this.swmSuiteSoapHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCountriesCompletedEventHandler GetCountriesCompleted;
        
        /// <remarks/>
        public event GetCountryCompletedEventHandler GetCountryCompleted;
        
        /// <remarks/>
        public event CreateCountryCompletedEventHandler CreateCountryCompleted;
        
        /// <remarks/>
        public event UpdateCountryCompletedEventHandler UpdateCountryCompleted;
        
        /// <remarks/>
        public event RemoveCountriesCompletedEventHandler RemoveCountriesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SwmSuiteSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("SimpleWorkfloorManagementSuiteNameSpace/GetCountries", RequestNamespace="SimpleWorkfloorManagementSuiteNameSpace", ResponseNamespace="SimpleWorkfloorManagementSuiteNameSpace", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Country[] GetCountries() {
            object[] results = this.Invoke("GetCountries", new object[0]);
            return ((Country[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCountriesAsync() {
            this.GetCountriesAsync(null);
        }
        
        /// <remarks/>
        public void GetCountriesAsync(object userState) {
            if ((this.GetCountriesOperationCompleted == null)) {
                this.GetCountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountriesOperationCompleted);
            }
            this.InvokeAsync("GetCountries", new object[0], this.GetCountriesOperationCompleted, userState);
        }
        
        private void OnGetCountriesOperationCompleted(object arg) {
            if ((this.GetCountriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountriesCompleted(this, new GetCountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SwmSuiteSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("SimpleWorkfloorManagementSuiteNameSpace/GetCountry", RequestNamespace="SimpleWorkfloorManagementSuiteNameSpace", ResponseNamespace="SimpleWorkfloorManagementSuiteNameSpace", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Country GetCountry(int sysId) {
            object[] results = this.Invoke("GetCountry", new object[] {
                        sysId});
            return ((Country)(results[0]));
        }
        
        /// <remarks/>
        public void GetCountryAsync(int sysId) {
            this.GetCountryAsync(sysId, null);
        }
        
        /// <remarks/>
        public void GetCountryAsync(int sysId, object userState) {
            if ((this.GetCountryOperationCompleted == null)) {
                this.GetCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountryOperationCompleted);
            }
            this.InvokeAsync("GetCountry", new object[] {
                        sysId}, this.GetCountryOperationCompleted, userState);
        }
        
        private void OnGetCountryOperationCompleted(object arg) {
            if ((this.GetCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountryCompleted(this, new GetCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SwmSuiteSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("SimpleWorkfloorManagementSuiteNameSpace/CreateCountry", RequestNamespace="SimpleWorkfloorManagementSuiteNameSpace", ResponseNamespace="SimpleWorkfloorManagementSuiteNameSpace", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Country CreateCountry(Country country) {
            object[] results = this.Invoke("CreateCountry", new object[] {
                        country});
            return ((Country)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCountryAsync(Country country) {
            this.CreateCountryAsync(country, null);
        }
        
        /// <remarks/>
        public void CreateCountryAsync(Country country, object userState) {
            if ((this.CreateCountryOperationCompleted == null)) {
                this.CreateCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCountryOperationCompleted);
            }
            this.InvokeAsync("CreateCountry", new object[] {
                        country}, this.CreateCountryOperationCompleted, userState);
        }
        
        private void OnCreateCountryOperationCompleted(object arg) {
            if ((this.CreateCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCountryCompleted(this, new CreateCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SwmSuiteSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("SimpleWorkfloorManagementSuiteNameSpace/UpdateCountry", RequestNamespace="SimpleWorkfloorManagementSuiteNameSpace", ResponseNamespace="SimpleWorkfloorManagementSuiteNameSpace", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Country UpdateCountry(Country country) {
            object[] results = this.Invoke("UpdateCountry", new object[] {
                        country});
            return ((Country)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCountryAsync(Country country) {
            this.UpdateCountryAsync(country, null);
        }
        
        /// <remarks/>
        public void UpdateCountryAsync(Country country, object userState) {
            if ((this.UpdateCountryOperationCompleted == null)) {
                this.UpdateCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCountryOperationCompleted);
            }
            this.InvokeAsync("UpdateCountry", new object[] {
                        country}, this.UpdateCountryOperationCompleted, userState);
        }
        
        private void OnUpdateCountryOperationCompleted(object arg) {
            if ((this.UpdateCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCountryCompleted(this, new UpdateCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SwmSuiteSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("SimpleWorkfloorManagementSuiteNameSpace/RemoveCountries", RequestNamespace="SimpleWorkfloorManagementSuiteNameSpace", ResponseNamespace="SimpleWorkfloorManagementSuiteNameSpace", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCountries(Country[] countries) {
            this.Invoke("RemoveCountries", new object[] {
                        countries});
        }
        
        /// <remarks/>
        public void RemoveCountriesAsync(Country[] countries) {
            this.RemoveCountriesAsync(countries, null);
        }
        
        /// <remarks/>
        public void RemoveCountriesAsync(Country[] countries, object userState) {
            if ((this.RemoveCountriesOperationCompleted == null)) {
                this.RemoveCountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCountriesOperationCompleted);
            }
            this.InvokeAsync("RemoveCountries", new object[] {
                        countries}, this.RemoveCountriesOperationCompleted, userState);
        }
        
        private void OnRemoveCountriesOperationCompleted(object arg) {
            if ((this.RemoveCountriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCountriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="SimpleWorkfloorManagementSuiteNameSpace")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="SimpleWorkfloorManagementSuiteNameSpace", IsNullable=false)]
    public partial class SwmSuiteSoapHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string passwordField;
        
        private int employeeField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public int Employee {
            get {
                return this.employeeField;
            }
            set {
                this.employeeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Country))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="SwmSuite_v1")]
    public partial class BusinessObjectBase {
        
        private int sysIdField;
        
        private int rowVersionField;
        
        /// <remarks/>
        public int SysId {
            get {
                return this.sysIdField;
            }
            set {
                this.sysIdField = value;
            }
        }
        
        /// <remarks/>
        public int RowVersion {
            get {
                return this.rowVersionField;
            }
            set {
                this.rowVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="SwmSuite_v1")]
    public partial class Country : BusinessObjectBase {
        
        private string nameField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCountriesCompletedEventHandler(object sender, GetCountriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Country[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Country[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCountryCompletedEventHandler(object sender, GetCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Country Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Country)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CreateCountryCompletedEventHandler(object sender, CreateCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Country Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Country)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateCountryCompletedEventHandler(object sender, UpdateCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Country Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Country)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RemoveCountriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591